// Move this file under /usr/share/X11/xkb/symbols
// Install
// under /etc/X11/xorg.conf.d/90-custom-kbd.conf
// with

//Section "InputClass"
//    Identifier "keyboard defaults"
//    MatchIsKeyboard "on"
//
//    Option "XkbModel" "pc104"
//    Option "XkbLayout" "hopkeyboard"
//    Option "XKbOptions" ""
//EndSection
// ---> tohle nefunguje

// Or maybe run
// sudo dpkg-reconfigure keyboard-configuration
// ---> tohle nefunguje

// Or update evdev.xml
// https://askubuntu.com/questions/510024/what-are-the-steps-needed-to-create-new-keyboard-layout-on-ubuntu

default  partial alphanumeric_keys modifier_keys
xkb_symbols "hop_keyboard_symbols" {
    name[Group1]= "English (US - with Mac friendly touches)";

    // This is my hop_keyboard
    // Tutorials:
    //  https://unix.stackexchange.com/questions/202883/create-xkb-configuration-from-xmodmap
    //  https://www.charvolant.org/doug/xkb/html/node5.html
    //  https://www.x.org/releases/X11R7.6/doc/xorg-docs/input/XKB-Config.html
    //  https://medium.com/@damko/a-simple-humble-but-comprehensive-guide-to-xkb-for-linux-6f1ad5e13450
    // Examples:
    //  https://github.com/nakal/xmonad-conf/blob/f25e81bf16d212b35dfe69765a135787c09c4b7b/xkb/us_alt
    
    // default "pc105" keyboard
    include "pc"
    // English (US) keyboard
    include "us"
    // Evdev Standardized Keycodes. Looks like custom keys. 
    include "inet(evdev)"
    // Toggle switch of the keyboard layout with alt+shift.
    // TODO: Disable this?
    include "group(alt_shift_toggle)"
    // caps lock acts as escape
    include "capslock(escape)"
    // swap left alt and left ctrl
    include "ctrl(swap_lalt_lctl)"

    // swap right alt and right ctrl (my edit)
    include "hopkeyboard(swap_ralt_rctl)"


    // override key <CAPS> {         [          Escape ] };
    // override key <LCTL> {         [           Alt_L,          Meta_L ] };
    // override key <LALT> {         [       Control_L ] };
    // key <BKSP> {         [       BackSpace,       BackSpace ] };
    // key <DELE> {         [          Delete ] };

    // key <LEFT> {
    //     symbols[Group1]= [            Left ],
    //     symbols[Group2]= [            Home ]
    // };
    // key <RGHT> {
    //     symbols[Group1]= [           Right ],
    //     symbols[Group2]= [             End ]
    // };

    // key <HOME> {         [            Home ] };
    // key   <UP> {         [              Up ] };
    // key <PGUP> {         [           Prior ] };

    // key  <END> {         [             End ] };
    // key <DOWN> {         [            Down ] };
    // key <PGDN> {         [            Next ] };


    // name[group1]="English (US)";

    // key  <ESC> {         [          Escape ] };
    // key <AE01> {         [               1,          exclam ] };
    // key <AE02> {         [               2,              at ] };
    // key <AE03> {         [               3,      numbersign ] };
    // key <AE04> {         [               4,          dollar ] };
    // key <AE05> {         [               5,         percent ] };
    // key <AE06> {         [               6,     asciicircum ] };
    // key <AE07> {         [               7,       ampersand ] };
    // key <AE08> {         [               8,        asterisk ] };
    // key <AE09> {         [               9,       parenleft ] };
    // key <AE10> {         [               0,      parenright ] };
    // key <AE11> {         [           minus,      underscore ] };
    // key <AE12> {         [           equal,            plus ] };
    
    // key  <TAB> {         [             Tab,    ISO_Left_Tab ] };
    // key <AD01> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               q,               Q ]
    // };
    // key <AD02> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               w,               W ]
    // };
    // key <AD03> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               e,               E ]
    // };
    // key <AD04> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               r,               R ]
    // };
    // key <AD05> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               t,               T ]
    // };
    // key <AD06> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               y,               Y ]
    // };
    // key <AD07> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               u,               U ]
    // };
    // key <AD08> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               i,               I ]
    // };
    // key <AD09> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               o,               O ]
    // };
    // key <AD10> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               p,               P ]
    // };
    // key <AD11> {         [     bracketleft,       braceleft ] };
    // key <AD12> {         [    bracketright,      braceright ] };
    // key <RTRN> {         [          Return ] };
    
    // key <AC01> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               a,               A ]
    // };
    // key <AC02> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               s,               S ]
    // };
    // key <AC03> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               d,               D ]
    // };
    // key <AC04> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               f,               F ]
    // };
    // key <AC05> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               g,               G ]
    // };
    // key <AC06> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               h,               H ]
    // };
    // key <AC07> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               j,               J ]
    // };
    // key <AC08> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               k,               K ]
    // };
    // key <AC09> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               l,               L ]
    // };
    // key <AC10> {         [       semicolon,           colon ] };
    // key <AC11> {         [      apostrophe,        quotedbl ] };
    // key <TLDE> {         [           grave,      asciitilde ] };
    // key <LFSH> {
    //     type= "PC_ALT_LEVEL2",
    //     symbols[Group1]= [         Shift_L,  ISO_Next_Group ]
    // };
    // key <BKSL> {         [       backslash,             bar ] };
    // key <AB01> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               z,               Z ]
    // };
    // key <AB02> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               x,               X ]
    // };
    // key <AB03> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               c,               C ]
    // };
    // key <AB04> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               v,               V ]
    // };
    // key <AB05> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               b,               B ]
    // };
    // key <AB06> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               n,               N ]
    // };
    // key <AB07> {
    //     type= "ALPHABETIC",
    //     symbols[Group1]= [               m,               M ]
    // };
    // key <AB08> {         [           comma,            less ] };
    // key <AB09> {         [          period,         greater ] };
    // key <AB10> {         [           slash,        question ] };
    // key <RTSH> {
    //     type= "PC_ALT_LEVEL2",
    //     symbols[Group1]= [         Shift_R,  ISO_Next_Group ]
    // };
    // key <KPMU> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [     KP_Multiply,     KP_Multiply,     KP_Multiply,     KP_Multiply,   XF86ClearGrab ]
    // };
    
    // key <SPCE> {         [           space ] };
    
    // key <FK01> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [              F1,              F1,              F1,              F1, XF86Switch_VT_1 ]
    // };
    // key <FK02> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [              F2,              F2,              F2,              F2, XF86Switch_VT_2 ]
    // };
    // key <FK03> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [              F3,              F3,              F3,              F3, XF86Switch_VT_3 ]
    // };
    // key <FK04> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [              F4,              F4,              F4,              F4, XF86Switch_VT_4 ]
    // };
    // key <FK05> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [              F5,              F5,              F5,              F5, XF86Switch_VT_5 ]
    // };
    // key <FK06> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [              F6,              F6,              F6,              F6, XF86Switch_VT_6 ]
    // };
    // key <FK07> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [              F7,              F7,              F7,              F7, XF86Switch_VT_7 ]
    // };
    // key <FK08> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [              F8,              F8,              F8,              F8, XF86Switch_VT_8 ]
    // };
    // key <FK09> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [              F9,              F9,              F9,              F9, XF86Switch_VT_9 ]
    // };
    // key <FK10> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [             F10,             F10,             F10,             F10, XF86Switch_VT_10 ]
    // };
    // key <NMLK> {         [        Num_Lock ] };
    // key <SCLK> {         [     Scroll_Lock ] };
    // key  <KP7> {         [         KP_Home,            KP_7 ] };
    // key  <KP8> {         [           KP_Up,            KP_8 ] };
    // key  <KP9> {         [        KP_Prior,            KP_9 ] };
    // key <KPSU> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [     KP_Subtract,     KP_Subtract,     KP_Subtract,     KP_Subtract,  XF86Prev_VMode ]
    // };
    // key  <KP4> {         [         KP_Left,            KP_4 ] };
    // key  <KP5> {         [        KP_Begin,            KP_5 ] };
    // key  <KP6> {         [        KP_Right,            KP_6 ] };
    // key <KPAD> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [          KP_Add,          KP_Add,          KP_Add,          KP_Add,  XF86Next_VMode ]
    // };
    // key  <KP1> {         [          KP_End,            KP_1 ] };
    // key  <KP2> {         [         KP_Down,            KP_2 ] };
    // key  <KP3> {         [         KP_Next,            KP_3 ] };
    // key  <KP0> {         [       KP_Insert,            KP_0 ] };
    // key <KPDL> {         [       KP_Delete,      KP_Decimal ] };
    
    // key <FK11> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [             F11,             F11,             F11,             F11, XF86Switch_VT_11 ]
    // };
    // key <FK12> {
    //     type= "CTRL+ALT",
    //     symbols[Group1]= [             F12,             F12,             F12,             F12, XF86Switch_VT_12 ]
    // };
    
    // key <RCTL> {         [       Control_R ] };


    // key <LWIN> {         [         Super_L ] };
    // key <RWIN> {         [         Super_R ] };
    
    
    // key  <ALT> {         [        NoSymbol,           Alt_L ] };
    // key <META> {         [        NoSymbol,          Meta_L ] };
    // key <SUPR> {         [        NoSymbol,         Super_L ] };
    // key <HYPR> {         [        NoSymbol,         Hyper_L ] };

    // modifier_map Mod1 { <LCTL> };
    // modifier_map Shift { <LFSH> };
    // modifier_map Shift { <RTSH> };
    // modifier_map Control { <LALT> };
    // modifier_map Mod2 { <NMLK> };
    // modifier_map Control { <RCTL> };
    // modifier_map Mod4 { <RWIN> };
    // modifier_map Mod1 { <ALT> };
    // modifier_map Mod1 { <META> };
    // modifier_map Mod4 { <SUPR> };
    // modifier_map Mod4 { <HYPR> };
    // modifier_map Mod4 { <LWIN> };
    // modifier_map Mod5 { <LVL3> };
};

// Swap the functions of the left Alt key and the left Ctrl key.
partial modifier_keys
xkb_symbols "swap_ralt_rctl" {
    replace key <RALT> { [ Control_R, Control_R ] };
    replace key <RCTL> { [ Alt_R, Meta_R ] };
    modifier_map Mod1    { <RCTL> };
    modifier_map Control { <RALT> };
};